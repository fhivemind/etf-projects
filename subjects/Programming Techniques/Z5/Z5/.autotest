{
    "id": 5521,
    "name": "Tehnike programiranja (2017\/2018), Zada\u0107a 5, zadatak 5",
    "language": "C++",
    "preferred_compiler": "g++",
    "required_compiler": "g++",
    "compiler_features": [

    ],
    "compiler_options": "-std=c++11 -O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-std=c++11 -ggdb -lm -pass-exit-codes",
    "profile": "true",
    "debug": "true",
    "test": "true",
    "compile": "true",
    "run": "false",
    "test_specifications": [
        {
            "id": 5,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/ AT1 (J) Operator [] i 1. konstruktor\n    \/\/ f(x)=L-x; -L<=x<=L\n    std::cout << std::fixed << std::setprecision(5);\n    double L=2;\n    FourierovRed f1(2*L, {2*L, 1}, {});\n    FourierovRed f2(2*L, {}, {-1.27324, 0.63662, -0.42441, 0.31831, -0.25465, 0.21221, -0.18189, 0.15915, -0.14147, 0.12732});\n    FourierovRed f3(2*L, {2*L}, {-1.27324, 0.63662, -0.42441, 0.31831, -0.25465, 0.21221, -0.18189, 0.15915, -0.14147, 0.12732});\n\n    try {\n        std::cout<<\"Koeficijenti:\"<<std::endl;\n        AT_Ispisi(\"f2.a\", \"f2.b\", 0);\n        \/\/ AT_Ispisi(\"a\", \"b\");\n        AT_Ispisi(\"f3.a\", \"f3.b\");\n        for(int i = 0; i <= 10; i++) {\n            AT_Ispisi(f2[i], 0);\n            \/\/ AT_Ispisi(f1[i]);\n            AT_Ispisi(f3[i]);\n        }\n        std::cout << std::endl;\n        std::cout << \"Pokusaj ispisa prva 3 koeficijenta iz f1:\"<<std::endl;\n        AT_Ispisi(f1[0]);\n        AT_Ispisi(f1[1]);\n        AT_Ispisi(f1[2]);\n    }\n    catch (std::range_error e) {\n        std::cout<<e.what()<<std::endl;\n    }",
            "global_above_main": "#include <iomanip> \/\/ AT bi trebao da ukljuci\nconst double AT_PI=4 * std::atan(1);\nconst double AT_eps=1e-10;\nint AT_sirina_ispisa=14;\ntemplate <typename T>\nvoid AT_Ispisi(T s1, T s2, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << s1 << std::setw(AT_sirina_ispisa) << s2;\n    if (withEndl) std::cout<<std::endl;\n}\ntemplate <typename T>\nT AT_zaokruzi(T x) { \n    auto oldPrec=std::cout.precision();\n    return std::floor( x * std::pow(10, oldPrec) + 0.5 ) \/ std::pow(10, oldPrec)+AT_eps;\n}\ntemplate <typename T>\nvoid AT_Ispisi(std::pair<T, T> p, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.first) << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.second);\n    if (withEndl) std::cout<<std::endl;\n}",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Koeficijenti:\\n          f2.a          f2.b          f3.a          f3.b\\n       0.00000       0.00000       4.00000       0.00000\\n       0.00000      -1.27324       0.00000      -1.27324\\n       0.00000       0.63662       0.00000       0.63662\\n       0.00000      -0.42441       0.00000      -0.42441\\n       0.00000       0.31831       0.00000       0.31831\\n       0.00000      -0.25465       0.00000      -0.25465\\n       0.00000       0.21221       0.00000       0.21221\\n       0.00000      -0.18189       0.00000      -0.18189\\n       0.00000       0.15915       0.00000       0.15915\\n       0.00000      -0.14147       0.00000      -0.14147\\n       0.00000       0.12732       0.00000       0.12732\\nPokusaj ispisa prva 3 koeficijenta iz f1:\\n       4.00000       0.00000\\n       1.00000       0.00000\\nNeispravan indeks"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 6,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/ AT3 (J)\n    \/\/ f(x)=x^2\n    \/\/ od 0 do 2AT_PI\n    \/\/ a0=8*pi^2\/3, ak=4\/(k^2) za k>0\n    \/\/ bk=-4*pi\/k\n    \/\/ 1. preko tacnih koeficijenata, 2. aproksimativno\n    \/\/ poredjenje u tacki x=3, N=50\n\n    \/\/ Iskljucimo scientific notaciju, preciznost do na 5 decimala\n    std::cout << std::fixed << std::setprecision(5);\n    auto k1=[](int k) { return (k == 0) ? 8 * AT_PI * AT_PI \/ 3 : 4. \/ (k * k); };\n    auto k2=[](int k) { return -4 * AT_PI \/ k; };\n    auto f=[](double x) { return x * x; };\n    FourierovRed f1(50, 2*AT_PI, k1, k2);\n    FourierovRed f2(50, 0, 2*AT_PI, f, 1000);\n    \n    std::cout<<\"Koeficijenti:\"<<std::endl;\n    \/\/ AT_Ispisi(\"a\", \"b\", 0);\n    AT_Ispisi(\"a\", \"b\");\n    \/\/ AT_Ispisi(\"a(apr)\", \"b(apr)\");\n    for(int i = 0; i <= 10; i++) {\n        \/\/ AT_Ispisi(f1[i], 0);\n        AT_Ispisi(f1[i]);\n        \/\/ AT_Ispisi(f2[i]);\n    }\n    std::cout << std::endl;\n    \/\/ AT_Ispisi(\"f1(3)\", \"f2(3)\");\n    \/\/ AT_Ispisi(f1(3), f2(3));\n    \/\/ Treba biti priblizno 9\n    double stv=f1(3);\n    double apr=f2(3);\n    if (apr<=stv+0.004 && apr>=stv-0.004) std::cout<<\"f1(3)\\u2248f2(3) OK\";\n    else std::cout<<\"Stvarna i aproksimirana vrijednost polinoma se previse razlikuju\"<<std::endl;\n    \n    std::cout << std::endl;\n    std::cout<<\"Dodjela f2=f1;\"<<std::endl<<std::endl;\n    f2=f1=f2=f1; \/\/ Operator dodjele\n    AT_Ispisi(\"f1(3)\", \"f2(3)\");\n    AT_Ispisi(f1(3), f2(3));",
            "global_above_main": "#include <iomanip> \/\/ AT bi trebao da ukljuci\nconst double AT_PI=4 * std::atan(1);\nconst double AT_eps=1e-10;\nint AT_sirina_ispisa=14;\ntemplate <typename T>\nvoid AT_Ispisi(T s1, T s2, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << s1 << std::setw(AT_sirina_ispisa) << s2;\n    if (withEndl) std::cout<<std::endl;\n}\ntemplate <typename T>\nT AT_zaokruzi(T x) { \n    auto oldPrec=std::cout.precision();\n    return std::floor( x * std::pow(10, oldPrec) + 0.5 ) \/ std::pow(10, oldPrec)+AT_eps;\n}\ntemplate <typename T>\nvoid AT_Ispisi(std::pair<T, T> p, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.first) << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.second);\n    if (withEndl) std::cout<<std::endl;\n}",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Koeficijenti:\\n             a             b\\n      26.31895       0.00000\\n       4.00000     -12.56637\\n       1.00000      -6.28319\\n       0.44444      -4.18879\\n       0.25000      -3.14159\\n       0.16000      -2.51327\\n       0.11111      -2.09440\\n       0.08163      -1.79520\\n       0.06250      -1.57080\\n       0.04938      -1.39626\\n       0.04000      -1.25664\\n\\nf1(3)\u2248f2(3) OK\\nDodjela f2=f1;\\n\\n         f1(3)         f2(3)\\n       9.09567       9.09567"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 7,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/ AT5 (J) Konstruktor kopije uz ispis svih koeficijenata pomocu operatora [],\n    \/\/ ispis vrijednosti f-je operatorom (),\n    \/\/ da li radi plitko ili duboko kopiranje?\n    std::cout << std::fixed << std::setprecision(2);\n    auto k1=[](int k) { return (k == 0) ? 8 * AT_PI * AT_PI \/ 3 : 4. \/ (k * k); };\n    auto k2=[](int k) { return -4 * AT_PI \/ k; };\n    const FourierovRed f1(50, 2*AT_PI, k1, k2);\n    FourierovRed *f2=new FourierovRed(f1);\n    FourierovRed *f3=new FourierovRed(*f2);\n    \n    delete f2;\n    \/\/ Ako je u pitanju samo plitko kopiranje desit ce se krah pri pokusaju pristupa koeficijentima iz f3\n    std::cout<<\"Koeficijenti:\"<<std::endl;\n    AT_Ispisi(\"a\", \"b\");\n    for(int i = 0; i <= 10; i++)\n        AT_Ispisi((*f3)[i]);\n    std::cout << \"f3(2)=\" << (*f3)(2) << std::endl;\n    delete f3;\n    \/\/ Treba biti priblizno 4",
            "global_above_main": "#include <iomanip> \/\/ AT bi trebao da ukljuci\nconst double AT_PI=4 * std::atan(1);\nconst double AT_eps=1e-10;\nint AT_sirina_ispisa=14;\ntemplate <typename T>\nvoid AT_Ispisi(T s1, T s2, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << s1 << std::setw(AT_sirina_ispisa) << s2;\n    if (withEndl) std::cout<<std::endl;\n}\ntemplate <typename T>\nT AT_zaokruzi(T x) { \n    auto oldPrec=std::cout.precision();\n    return std::floor( x * std::pow(10, oldPrec) + 0.5 ) \/ std::pow(10, oldPrec)+AT_eps;\n}\ntemplate <typename T>\nvoid AT_Ispisi(std::pair<T, T> p, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.first) << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.second);\n    if (withEndl) std::cout<<std::endl;\n}",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Koeficijenti:\\n             a             b\\n         26.32          0.00\\n          4.00        -12.57\\n          1.00         -6.28\\n          0.44         -4.19\\n          0.25         -3.14\\n          0.16         -2.51\\n          0.11         -2.09\\n          0.08         -1.80\\n          0.06         -1.57\\n          0.05         -1.40\\n          0.04         -1.26\\nf3(2)=4.13"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 8,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/\/ AT11 (J) Izuzeci\n    std::cout << std::fixed << std::setprecision(5);\n    auto k1=[](int k) { return (k == 0) ? 8 * AT_PI * AT_PI \/ 3 : 4. \/ (k * k); };\n    auto k2=[](int k) { return -4 * AT_PI \/ k; };\n    auto f=[](double x) { return x * x; };\n    \n    try {\n        FourierovRed f1(0, 2*AT_PI,  k1, k2);\n        std::cout<<\"Izuzetak 1, PROBLEM - nije bacen izuzetak, N<=0\"<<std::endl;\n    }\n    catch (std::domain_error e) {\n        std::cout<<\"Izuzetak 1, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 1, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }\n    \n    try {\n        FourierovRed f1(-2, 2*AT_PI, k1, k2);\n        std::cout<<\"Izuzetak 2, PROBLEM - nije bacen izuzetak, N<=0\"<<std::endl;\n    }\n    catch (std::domain_error e) {\n        std::cout<<\"Izuzetak 2, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 2, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }\n    \n    try {\n        FourierovRed f1(-2, 0, 2*AT_PI, f, 1000);\n        std::cout<<\"Izuzetak 3, PROBLEM - nije bacen izuzetak, N<=0\"<<std::endl;\n    }\n    catch (std::domain_error e) {\n        std::cout<<\"Izuzetak 3, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 3, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }\n    \n    try {\n        FourierovRed f1(2, 0, 2*AT_PI, f, 0);\n        std::cout<<\"Izuzetak 4, PROBLEM - nije bacen izuzetak, M<=0\"<<std::endl;\n    }\n    catch (std::domain_error e) {\n        std::cout<<\"Izuzetak 4, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 4, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }\n    \n    try {\n        FourierovRed f1(2, 0, 2*AT_PI, f, -6);\n        std::cout<<\"Izuzetak 5, PROBLEM - nije bacen izuzetak, M<=0\"<<std::endl;\n    }\n    catch (std::domain_error e) {\n        std::cout<<\"Izuzetak 5, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 5, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }\n    \n    try {\n        FourierovRed f1(2, 2*AT_PI, 0, f, 1000);\n        std::cout<<\"Izuzetak 6, PROBLEM - nije bacen izuzetak, !(p<q)\"<<std::endl;\n    }\n    catch (std::range_error e) {\n        std::cout<<\"Izuzetak 6, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 6, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }\n    \n    try {\n        FourierovRed f1(50, 0, 2*AT_PI, f, 100);\n        f1[51];\n        std::cout<<\"Izuzetak 7, PROBLEM - nije bacen izuzetak, a neispravan je indeks\"<<std::endl;\n    }\n    catch (std::range_error e) {\n        std::cout<<\"Izuzetak 7, OK\"<<std::endl;\n        std::cout<<\"     \"<<e.what()<<std::endl;\n    }\n    catch (...) {\n        std::cout<<\"Izuzetak 7, PROBLEM - pogresan tip izuzetka\"<<std::endl;\n    }",
            "global_above_main": "#include <iomanip> \/\/ AT bi trebao da ukljuci\nconst double AT_PI=4 * std::atan(1);\nconst double AT_eps=1e-10;\nint AT_sirina_ispisa=14;\ntemplate <typename T>\nvoid AT_Ispisi(T s1, T s2, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << s1 << std::setw(AT_sirina_ispisa) << s2;\n    if (withEndl) std::cout<<std::endl;\n}\ntemplate <typename T>\nT AT_zaokruzi(T x) { \n    auto oldPrec=std::cout.precision();\n    return std::floor( x * std::pow(10, oldPrec) + 0.5 ) \/ std::pow(10, oldPrec)+AT_eps;\n}\ntemplate <typename T>\nvoid AT_Ispisi(std::pair<T, T> p, bool withEndl=true) {\n    std::cout << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.first) << std::setw(AT_sirina_ispisa) << AT_zaokruzi(p.second);\n    if (withEndl) std::cout<<std::endl;\n}",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Izuzetak 1, OK\\n     Stepen mora biti pozitivan\\nIzuzetak 2, OK\\n     Stepen mora biti pozitivan\\nIzuzetak 3, OK\\n     Stepen mora biti pozitivan\\nIzuzetak 4, OK\\n     Broj podintervala mora biti pozitivan\\nIzuzetak 5, OK\\n     Broj podintervala mora biti pozitivan\\nIzuzetak 6, OK\\n     Neispravan interval\\nIzuzetak 7, OK\\n     Neispravan indeks"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}