{
    "id": 393904,
    "name": "Osnove ra\u010dunarstva (2016\/2017), Ispit 11, Zadatak 4",
    "language": "C",
    "required_compiler": "gcc",
    "preferred_compiler": "gcc",
    "compiler_features": [

    ],
    "compiler_options": "-O1 -Wall -Wuninitialized -Winit-self -Wfloat-equal -Wno-sign-compare -Werror=implicit-function-declaration -Werror=vla -pedantic -lm -pass-exit-codes",
    "compiler_options_debug": "-ggdb -lm -pass-exit-codes",
    "compile": "true",
    "run": "false",
    "test": "true",
    "debug": "true",
    "profile": "true",
    "test_specifications": [
        {
            "id": 43,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT1: Provjera funkcije ucitaj_artikle (datoteka je data na serveru) *\/\nstruct Artikal a[50];\nint n = ucitaj_artikle(a, 50), i;\nfor (i = 0; i < n; ++i)\n\tprintf (\"%s (cijena: %g, prodavnica: %d)\\n\", a[i].naziv, a[i].cijena, a[i].prodavnica);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Brasno (cijena: 5.2, prodavnica: 1)\\nUlje (cijena: 2, prodavnica: 1)\\nSecer (cijena: 1.5, prodavnica: 1)\\nBrasno (cijena: 5.2, prodavnica: 2)\\nUlje (cijena: 2.1, prodavnica: 2)\\nSecer (cijena: 2.2, prodavnica: 2)\\nBrasno (cijena: 5.2, prodavnica: 3)\\nUlje (cijena: 1.1, prodavnica: 3)\\nSecer (cijena: 1.2, prodavnica: 3)\\nGrah (cijena: 5, prodavnica: 3)"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 44,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT2: Provjera funkcije ucitaj_prodavnice *\/\n\n\/* Rucno kreiramo prodavnice.txt *\/\nFILE *fp;\nfprintf (fp = fopen (\"prodavnice.txt\", \"w\"), \"Amko,1\\nBingo,2\\nRobot,3\\nKonzum,4\");\nfclose (fp);\n\n\/* Sada ucitavamo *\/\nstruct Prodavnica p[10];\nint n = ucitaj_prodavnice(p, 10), i;\nfor (i = 0; i < n; ++i)\n\tprintf (\"'%s', id: %d\\n\", p[i].naziv, p[i].ID);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Amko', id: 1\\n'Bingo', id: 2\\n'Robot', id: 3\\n'Konzum', id: 4"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 45,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT3: Provjeravamo kako se program ponasa kada se u datoteci nalazi visak prodavnica\n   kao i razmake u imenu prodavnice 'Bingo Tuzla' *\/\n\nFILE *fp;\nfprintf (fp = fopen (\"prodavnice.txt\", \"w\"), \"Amko,1\\nBingo Tuzla,2\\nAmko,3\\nKonzum Kolodvorska,4\");\nfclose (fp);\nstruct Prodavnica p[2];\nint n = ucitaj_prodavnice(p, 2), i;\nfor (i = 0; i < n; ++i)\n\tprintf (\"'%s', id: %d\\n\", p[i].naziv, p[i].ID);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Amko', id: 1\\n'Bingo Tuzla', id: 2"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 46,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT4: Provjeravamo kako se program ponasa kada se u datoteci nalazi visak artikala *\/\n\nstruct Artikal a[7];\nint n = ucitaj_artikle(a, 7), i;\nfor (i = 0; i < n; ++i)\n\tprintf (\"%s (cijena: %g, prodavnica: %d)\\n\", a[i].naziv, a[i].cijena, a[i].prodavnica);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Brasno (cijena: 5.2, prodavnica: 1)\\nUlje (cijena: 2, prodavnica: 1)\\nSecer (cijena: 1.5, prodavnica: 1)\\nBrasno (cijena: 5.2, prodavnica: 2)\\nUlje (cijena: 2.1, prodavnica: 2)\\nSecer (cijena: 2.2, prodavnica: 2)\\nBrasno (cijena: 5.2, prodavnica: 3)"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 47,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT5: Naziv prodavnice je u datoteci duzi od 99 znakova, treba ucitati prvih 99, ostale ignorirati*\/\nFILE *fp;\nfprintf (fp = fopen (\"prodavnice.txt\", \"w\"), \"Amko,10\\nKonzum,12345\\nBingo Tuzla d.o.o (vl. Senad Dzambic 1993.g) - Bosanska Poljana bb - Tuzla - Bosna i Hercegovina EUROPA - SVIJET,1\\nKod Seje,15\");\nfclose (fp);\nstruct Prodavnica p[10];\nint n = ucitaj_prodavnice(p, 10), i;\nfor (i = 0; i < n; ++i)\n\tprintf (\"'%s', id: %d\\n\", p[i].naziv, p[i].ID);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "'Amko', id: 10\\n'Konzum', id: 12345\\n'Bingo Tuzla d.o.o (vl. Senad Dzambic 1993.g) - Bosanska Poljana bb - Tuzla - Bosna i Hercegovina EU', id: 1\\n'Kod Seje', id: 15"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 48,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT6: Provjeravamo ispravnost funkcije sacuvaj() *\/\nstruct Prodavnica p[] = {\n\t{\"Amko\", 1},\n\t{\"Amko\", 2},\n\t{\"Amko\", 3},\n\t{\"Bingo Tuzla\", 10},\n\t{\"Bingo Konjic\", 11},\n\t{\"Bingo Pofalici\", 12},\n\t{\"Konzum\", 20},\n\t{\"Konzum ZG\", 21},\n}, v[12];\nprintf (\"Uspjesno: %d\\n\", sacuvaj(p, 8, \"prod1.bin\"));\nprintf (\"Uspjesno: %d\\n\", sacuvaj(p, 4, \"prod2.bin\"));\nprintf (\"Spaseno:\\n\");\n\n\nFILE *fa = fopen (\"prod1.bin\", \"rb\"), *fb = fopen (\"prod2.bin\", \"rb\");\nint i;\nfor (i = 0; i < 12; ++i)\n\tfread (v + (i < 8 ? i : i), sizeof *v, (i > 8 ? 1 : (i < 8 ? 1 : 1)), i < 8 ? fa : fb);\nfor (i = 0; i < 12; ++i)\n\tprintf (\"'%s', ID: %d\\n\", (v + i)->naziv, v[i].ID);\nfclose (fa); fclose (fb);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Uspjesno: 1\\nUspjesno: 1\\nSpaseno:\\n'Amko', ID: 1\\n'Amko', ID: 2\\n'Amko', ID: 3\\n'Bingo Tuzla', ID: 10\\n'Bingo Konjic', ID: 11\\n'Bingo Pofalici', ID: 12\\n'Konzum', ID: 20\\n'Konzum ZG', ID: 21\\n'Amko', ID: 1\\n'Amko', ID: 2\\n'Amko', ID: 3\\n'Bingo Tuzla', ID: 10"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 49,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT7: Testiramo funkciju izbaci_skupe *\/\n\/* NOTE: funkcija vraca broj elemenata nakon izbacivanja! *\/\n\nstruct Prodavnica p[] = {\n\t{\"Konzum\", 2}, \/\/Konzum ima vece cijene!\n\t{\"Amko\", 1}, \/\/jedino on ostaje\n\t{\"Bingo\", 3}, \/\/i Bingo ima vece cijene zbog Graha (5KM)\n};\nstruct Artikal n[] = {\n\t{\"Brasno\", 5.2, 1},\n\t{\"Ulje\", 2, 1},\n\t{\"Secer\", 1.5, 1},\n\t{\"Brasno\", 5.2, 2},\n\t{\"Ulje\", 2.1, 2},\n\t{\"Secer\", 2.2, 2},\n\t{\"Brasno\", 5.2, 3},\n\t{\"Ulje\", 1.1, 3},\n\t{\"Secer\", 1.2, 3},\n\t{\"Grah\", 5, 3}\n};\nint nova_vel = izbaci_skupe(p, 3, n, 10), i;\nprintf (\"Ostalo je %d prodavnica, i to: \\n\", nova_vel);\nfor (i = 0; i < nova_vel; ++i)\n\tprintf (\"'%s', ID: %d\\n\", p[i].naziv, p[i].ID);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Ostalo je 1 prodavnica, i to: \\n'Amko', ID: 1"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 50,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT8: ID-ovi prodavnica ne odgovaraju artiklima (prodavnice NEMAJU artikala), nema se sta izbacivati u tom slucaju! *\/\t\nstruct Prodavnica p[] = {\n\t{\"Amko\", 1},\n\t{\"Bingo\", 2},\n\t{\"Konzum\", 3},\n};\nstruct Artikal a[] = {\n\t{\"Kiseli kupus\", 10, 4},\n\t{\"Bickl\", 1000, 5},\n\t{\"Krastavci\", 2, 4}\n};\nint i = izbaci_skupe(p, 3, a, 3), j;\nfor (j = 0; j < i; ++j)\n\tprintf (\"%s, ID: %d\\n\", p[j].naziv, p[j].ID);",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Amko, ID: 1\\nBingo, ID: 2\\nKonzum, ID: 3"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        },
        {
            "id": 51,
            "require_symbols": [

            ],
            "replace_symbols": [

            ],
            "code": "\/* AT9: Broj artikala ili broj prodavnica je 0  *\/\t\nstruct Prodavnica p[] = {\n\t{\"Amko\", 1},\n\t{\"Bingo\", 2},\n\t{\"Konzum\", 3},\n};\nstruct Artikal a[] = {\n\t{\"Kiseli kupus\", 10, 4},\n\t{\"Bickl\", 1000, 5},\n\t{\"Krastavci\", 2, 4}\n};\nint i = izbaci_skupe(p, 3, a, 0), j;\nfor (j = 0; j < i; ++j)\n\tprintf (\"%s, ID: %d\\n\", p[j].naziv, p[j].ID);\ni = izbaci_skupe(p, 0, a, 0);\nfor (j = 0; j < 3; ++j)\n\tprintf (\"%s, ID: %d\\n\", p[j].naziv, p[j].ID);\ni = izbaci_skupe(p, 0, a, 3);\nfor (j = 0; j < 3; ++j)\n\tprintf (\"%s, ID: %d\\n\", p[j].naziv, p[j].ID);\t",
            "global_above_main": "",
            "global_top": "",
            "running_params": {
                "timeout": "10",
                "vmem": "1000000",
                "stdin": ""
            },
            "expected": [
                "Amko, ID: 1\\nBingo, ID: 2\\nKonzum, ID: 3\\nAmko, ID: 1\\nBingo, ID: 2\\nKonzum, ID: 3\\nAmko, ID: 1\\nBingo, ID: 2\\nKonzum, ID: 3"
            ],
            "expected_exception": "false",
            "expected_crash": "false",
            "ignore_whitespace": "false",
            "regex": "false",
            "substring": "false"
        }
    ]
}